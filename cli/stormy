#!/bin/bash

## Stormy location

stormy_cli_dir="$(dirname $0)/"

## Adding config ##

if [ -e ~/.config/stormy/config ]; then
	source ~/.config/stormy/config
else
	source ${stormy_cli_dir}config
fi
source ${stormy_cli_dir}stormy_help

## Flags and options ##

simple_flag="0"
autoencrypt_flag="0"
encrypt_flag="0"
desc_flag="0"
force_flag="0"
name_flag="0"
version_flag="0"
help_flag="0"
long_flag="0"
link_flag="0"
list_flag="0"
otl_flag="0"
dir_flag="0"
unzip_flag="0"
smart_flag="0"
remove_flag="0"
removeall_flag="0"
removedir_flag="0"

dir_option="/"
eat_dir_option="0"

package_name_option=""
eat_package_name_option="0"
	
desc_option="-"
eat_desc_option="0"

declare -a arguments
arguments_count=0

have_command="0"
command=""

## End of options ""

if [ $unzip_default == "1" ] && [ $unzip_ask_default == "1" ]; then
	echo "Unzip_default and unzip_ask_default cannot be both set!"
	exit 1
fi

## Options Parsing ##

source ${stormy_cli_dir}stormy_parse_options

#dbg_options

function call_help(){
	echo "Stormy command line tool to use stormy api, allows to fast upload files to stormy server, download and link them."
	echo "It supports 7 basic commands:"
	echo "  upload    -- uploads files to stormy server."
	echo "  download  -- downloads files from stormy server."
	echo "  mkdir     -- creates directories on stormy server."
	echo "  ls        -- lists files uploaded to stormy server."
	echo "  remove    -- removes files on stormy server."
	echo "  link      -- creates download link for uploaded files."
	echo "  stat      -- prints info about file on stormy server."
	echo "Other commands, are: help, version, update_ip and api_status. Command update_ip updates stormy server ip in config, use this command when not being able to connect to make api_calls. Command 'api_status' checks whether server is down. This message can be printed using help command. Version can be printed using -v or --version flag or version command."
	echo "To print help for specified command use --help option, for example:"
	echo "stormy upload --help"
}


## check if command was given

## End of options parsing ##

if [ ${have_command} == "0" ]; then
	if [ $version_flag == "1" ]; then
		echo "Stormy version: 1.0"
		exit 0
	fi
	echo "Use stormy help for help"
	exit 0
fi


if [ $command == "'version'" ]; then
	echo "Stormy version: 1.0"
	exit 0
fi

if [ $command == "'api_status'" ]; then
	wget https://${stormy_server_ip}:${stormy_server_api_port} -O /tmp/status --no-check-certificate 2> /dev/null
	if [ $? == "0" ]; then
		cat /tmp/status
		rm /tmp/status
	else
		echo "Stormy server unreachable!"
	fi
	exit 0
fi

if [ $command == "'help'" ]; then
	call_help
	exit 0
fi

## Update_ip ##

if [ $command == "'update_ip'" ]; then
	cat ${stormy_cli_dir}config | grep ^stormy_server_ip -v > /tmp/config
	wget $ip_provider -O /tmp/a.js 2> /dev/null
	echo -n "stormy_server_" >> /tmp/config
	cat /tmp/a.js >> /tmp/config
	cat /tmp/config > ${stormy_cli_dir}config
	echo "Updated ip to: $(cat /tmp/a.js | awk -F '=' '{print $2}' | sed s/\"//g)"
	rm /tmp/config
	rm /tmp/a.js
fi

## End of update ip ##

## Upload part ##

function upload_file(){
	# upload_file local_file_name new_file_name location is_autoencrypted is_encrypted is_archive desc
	# 					1				2			3		4					5			6		7

	# check if file exists localy

	if [ ! -e $1 ] || [ -d $1 ]; then
		echo "File: $1 does not exists!"
		return 1
	fi
	# check if file exists on server and ask if want to overwrite
	${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/checkiffileexists $user $token location $3 file_name $2 2> /dev/null

	if [ $? == "0" ]; then
		if [ $force_flag == "1" ]; then
			echo "Overwriting file on stormy."
		else
			echo -n "Do you want to overwrite? [Y/n] "
			read ans
			if [ $ans == "y" ] || [ $ans == "Y" ]; then
				echo "Overwriting file on stormy."
			else
				return 1
			fi
		fi
	fi
	
	# Upload file to server
	if [ $use_scp_instead_of_api == "1" ]; then
		scp -P $stormy_server_scp_port $1 ${stormy_server_user}@${stormy_server_ip}:${stormy_server_directory}/incoming_files/${user}
		if [ ! $? == "0" ]; then
			return 1
		fi 
	else
		${stormy_cli_dir}upl.py $1 $user $token https://${stormy_server_ip}:${stormy_server_api_port}/fileupload 2> /dev/null
		if [ ! $? == "0" ]; then
			return 1
		fi
	fi

	# Deploy file on server
	${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/deployfile $user $token location $3 file_name $2 desc $7 auto_encryption $4 encryption $5 is_archive $6 device $computer_data 2> /dev/null

	if [ $link_flag == "1" ]; then
		A=$(${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/createlink $user $token location $3 one_time_link $otl_flag file_name $2 desc autogenerated_while_uploading 2>/dev/null)
		echo $A
	fi
}

if [ $command == "'upload'" ]; then
	if [ $help_flag == "1" ]; then
		upload_help
		exit 0
	fi
	# prepare device info for upload
	source /etc/os-release
	computer_data=$(echo "${USER}@$(cat /etc/hostname) (${PRETTY_NAME})" | sed "s/ /_space_/g")

	# check if location exists on server
	${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/checkifdirexists $user $token location ${dir_option} 2> /dev/null
	if [ $? == "2" ]; then
		exit 1
	fi
	if [ $? == "1" ]; then
		echo "Directory '${dir_option}' does not exist on stormy."
		exit 1
	fi

	if [ $simple_flag == "1" ]; then
		if [ $name_flag == "1" ]; then
			echo "Name option is ignored when using simple option"
		fi
		for i in ${arguments[@]}
		do
			upload_file $i $(basename $i) $dir_option 0 0 0 $desc_option
		done
	else
		if [ $autoencrypt_flag == "1" ] && [ $encrypt_flag == "1" ]; then
			echo "autoencrypt and encryption flags cannot be used at once!"
			exit 1
		fi
		if [ $name_flag == "0" ]; then
			echo "Name option need's to be specified"
			exit 1
		fi
		# Prepare archive based on encryption options
		echo "Preparing archive"
		# Encryption type variables
		AE="0"
		EE="0"
		if [ $encrypt_flag == "1" ]; then
			zip -r -e /tmp/stormy_to_upload ${arguments[@]}
			EE="1"
		else
			if [ $autoencrypt_flag == "1" ] || [ $autoencrypt == "1" ]; then
				zip -r -e -P $autoencrypt_pass /tmp/stormy_to_upload ${arguments[@]}
				AE="1"
			else
				zip -r /tmp/stormy_to_upload ${arguments[@]}
			fi
		fi
		upload_file /tmp/stormy_to_upload.zip $package_name_option $dir_option $AE $EE 1 $desc_option
		if [ $show_md5_for_packages == "1" ]; then
			echo -n "Local md5sum:  "
			md5sum /tmp/stormy_to_upload.zip | awk -F ' ' '{print $1}'
			echo -n "Remote md5sum: "
			${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/filestat $user $token location $dir_option file_name $package_name_option 2>/dev/null | grep md5sum | sed "s/  md5sum:        //"
		fi
		rm /tmp/stormy_to_upload.zip
	fi
fi

## End of upload part ##

## Download part ##

function download_file(){
	echo "Downloading file: $1 located at: $2"
	echo "Creating download link."
	A=$(${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/createlink $user $token location $2 one_time_link "1" file_name $1 desc download_with_cli 2>/dev/null)
	if [ $? == "1" ] || [ $? == "2" ]; then
		echo $A
		exit 1
	fi
	echo "Getting file info."
	I=$(${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/fileinfo $user $token location $2 file_name $1 2>/dev/null)
	if [ $? == "1" ] || [ $? == "2" ]; then
		echo $I
		exit 1
	fi
	

	B=$(echo $A | awk -F '?' '{print $2}')
	A=$(echo $B)
	B=$(echo $A | sed s/downloadbylink=//)
	wget https://${stormy_server_ip}:${stormy_server_api_port}/${A} -O /tmp/to_deploy --no-check-certificate

	echo "Removing file link."
	${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/removelink $user $token link $B 2>/dev/null
	echo $I | grep 'package' > /dev/null
	P=$?
	N=$(echo $I | awk -F '/' '{print $1}')
	echo $I | grep '/pass' > /dev/null
	EE=$?
	echo $I | grep '/auto' > /dev/null
	AE=$?
	
	if [ $P != "0" ]; then
		if [ -e ${desc_option}${N} ]; then
			echo -n "File ${desc_option}${N} exists overwrite? [Y/n] "
			read ans
			if [ $ans == "y" ] || [ $ans == "Y" ]; then
				mv /tmp/to_deploy ${desc_option}$N
			else
				echo "File left in /tmp/to_deploy (and is going to be overwritten with next download)"
			fi
		else
			mv /tmp/to_deploy ${desc_option}${N}
			echo "File saved as ${desc_option}${N}"
		fi
	else
		N=$N.zip
		if [ $unzip_flag == "1" ] || [ $unzip_default == "1" ]; then
			if [ $AE == "0" ]; then
				unzip -P $autoencrypt_pass /tmp/to_deploy -d $desc_option
			else
				unzip /tmp/to_deploy -d $desc_option
			fi
		else
			if [ $unzip_ask_default == "1" ]; then
				echo -n "Decompress package $(echo $N | sed "s/.zip//g")? [Y/n] "
				read ans
				if [ $ans == "y" ] || [ $ans == "Y" ]; then
					if [ $AE == "0" ]; then
						unzip -P $autoencrypt_pass /tmp/to_deploy -d $desc_option
					else
						unzip /tmp/to_deploy -d $desc_option
					fi
				else
					if [ -e ${desc_option}${N} ]; then
						echo -n "File ${desc_option}${N} exists overwrite? [Y/n] "
						read ans
						if [ $ans == "y" ] || [ $ans == "Y" ]; then
							mv /tmp/to_deploy ${desc_option}$N
							echo "File saved as ${desc_option}${N}"
					else
							echo "File left in /tmp/to_deploy (and is going to be overwritten with next download)"
						fi
					else
						mv /tmp/to_deploy ${desc_option}${N}
						echo "File saved as ${desc_option}${N}"
					fi
				fi
			else
				if [ -e ${desc_option}${N} ]; then
					echo -n "File ${desc_option}${N} exists overwrite? [Y/n] "
					read ans
					if [ $ans == "y" ] || [ $ans == "Y" ]; then
						mv /tmp/to_deploy ${desc_option}$N
						echo "File saved as ${desc_option}${N}"
					else
						echo "File left in /tmp/to_deploy (and is going to be overwritten with next download)"
					fi
				else
					mv /tmp/to_deploy ${desc_option}${N}
					echo "File saved as ${desc_option}${N}"
				fi
			fi
		fi
	fi
}


if [ $command == "'download'" ]; then
	if [ $help_flag == "1" ]; then
		download_help
		exit 0
	fi
	if [ $desc_flag == "0" ]; then
		desc_option="./"
	else
		desc_option=$(echo $desc_option | sed 's/\///g')/
	fi
	if [ $arguments_count == "0" ] && [ $name_flag == "0" ]; then
		echo "Use name option or argument do specify a file!"

		exit 1
	fi	
	if [ $name_flag == "1" ] && [ $arguments_count != "0" ]; then
		echo "Use arguments or options to specify file, not both at once!";
		exit 1
	fi
	if [ $name_flag == "1" ]; then
		download_file $package_name_option $dir_option
		exit 0
	fi
	for i in ${arguments[@]}
	do
		if [ $smart_flag == "1" ] || [ $use_smart_search == "1" ]; then
			download_file $(basename $i) $(dirname /$i)
		else
			download_file $i $dir_option
		fi
	done
fi

## End of download part

## Remote mkdir ##

if [ $command == "'mkdir'" ]; then
	if [ $help_flag == "1" ]; then
		mkdir_help
		exit 0
	fi
	if [ $dir_flag == "1" ] && [ $arguments_count !=  "0" ]; then
		echo "Use arguments or options to specify directory, not both at once!";
		exit  1
	fi
	
	if [ $dir_flag == "1" ]; then
		${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/remotemkdir $user $token location ${dir_option} 2>/dev/null
		exit $?
	else
		if [ $arguments_count != "0" ]; then
			for i in ${arguments[@]}
			do
				${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/remotemkdir $user $token location $i 2>/dev/null
			done
		else
			echo "Specify directory name with --dir option or pass it as argument!"
			exit 1
		fi
	fi
fi

## End of remote mkdir ##

## Remote ls ##

if [ $command == "'ls'" ]; then
	if [ $help_flag == "1" ]; then
		ls_help
		exit 0
	fi
	if [ $dir_flag == "1" ] && [ $arguments_count != "0" ]; then
		echo "Use arguments or options to specify directory, not both at once!";
		exit 1
	fi
	if [ $arguments_count == "0" ]; then
		${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/remotels $user $token location ${dir_option} long $long_flag 2>/dev/null
		exit $?
	fi
	for i in ${arguments[@]}
	do
		${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/remotels $user $token location $i long $long_flag 2>/dev/null
		if [ $arguments_count != "1" ]; then
			echo ""
		fi
	done
	exit 0
fi

## End of remote mkdir ##

## Stat command ##

if [ $command == "'stat'" ]; then
	if [ $help_flag == "1" ]; then
		stat_help
		exit 0
	fi
	if [ $name_flag == "1" ] && [ $arguments_count != "0" ]; then
		echo "Use arguments or options to specify file, not both at once!";
		exit 1
	fi
	if [ $arguments_count == "0" ]; then
		if [ $name_flag == "1" ]; then
			${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/filestat $user $token location $dir_option file_name $package_name_option 2>/dev/null
			exit $?
		else
			echo "Specify filename with --name option or as argument!"
			exit 0
		fi
	fi
	for i in ${arguments[@]}
	do
		if [ $smart_flag == "1" ] || [ $use_smart_search == "1" ]; then
			${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/filestat $user $token location $(dirname /$i) file_name $(basename $i) 2>/dev/null
		else 
			${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/filestat $user $token location ${dir_option} file_name $i 2>/dev/null
		fi
		if [ $arguments_count != "1" ]; then
			echo ""
		fi
	done
	exit 0
fi

## End of stat command ##

## Link command ##

if [ $command == "'link'" ]; then
	if [ $help_flag == "1" ]; then
		link_help
		exit 0
	fi
	if [ $remove_flag == "1" ]; then
		if [ $arguments_count == "0" ]; then
			echo "Specify links IDs as arguments. To see link ID's use ls command with --long option"
		fi
		for i in ${arguments[@]}
		do
			${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/removelink $user $token link $i 2>/dev/null
		done
		exit 0
	fi

	if [ $removeall_flag == "1" ]; then
		if [ $name_flag == "1" ] && [ $arguments_count != "0" ]; then
			echo "Use arguments or options to specify file, not both at once!";
			exit 1
		fi
		if [ $arguments_count == "0" ]; then
			if [ $name_flag == "1" ]; then
				${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/removelinks $user $token location ${dir_option} file_name $package_name_option 2>/dev/null
				exit $?
			else
				echo "Specify filename with --name option or as argument!"
				exit 0
			fi
		fi
		for i in ${arguments[@]}
		do
			if [ $smart_flag == "1" ] || [ $use_smart_search == "1" ]; then
				echo "Removing links for file $(basename $i) located at $(dirname /$i)"
				${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/removelinks $user $token location $(dirname /$i) file_name $(basename $i) 2>/dev/null
			else
				echo "Removing links for file $i located at $dir_option"
				${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/removelinks $user $token location $dir_option file_name $i 2>/dev/null
			fi
		done
		exit 0
	fi
	
	if [ $list_flag == "1" ]; then
		if [ $name_flag == "1" ] && [ $arguments_count != "0" ]; then
			echo "Use arguments or options to specify file, not both at once!";
			exit 1
		fi
		if [ $arguments_count == "0" ]; then
			if [ $name_flag == "1" ]; then
				#SED="s/HOST/"$(echo $link_prefix | sed 's/\//\\\//g')"/g"
				${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/listlinks $user $token long $long_flag location $dir_option file_name $package_name_option 2>/dev/null #| sed $SED
				exit $?
			else
				echo "Specify filename with --name option or as argument!"
				exit 0
			fi
		fi
		for i in ${arguments[@]}
		do
			#SED="s/HOST/"$(echo $link_prefix | sed 's/\//\\\//g')"/g"
			if [ $smart_flag == "1" ] || [ $use_smart_search == "1" ]; then
				${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/listlinks $user $token long $long_flag location $(dirname /$i) file_name $(basename $i) 2>/dev/null #| sed $SED
			else 
				${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/listlinks $user $token long $long_flag location ${dir_option} file_name $i 2>/dev/null #| sed $SED
			fi
		done
		exit 0
	else
		#make links
		if [ $name_flag == "1" ] && [ $arguments_count != "0" ]; then
			echo "Use arguments or options to specify file, not both at once!";
			exit 1
		fi
		if [ $arguments_count == "0" ]; then
			if [ $name_flag == "1" ]; then
				echo "Creating link for file $package_name_option located at $dir_option"
				A=$(${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/createlink $user $token location $dir_option one_time_link $otl_flag file_name $package_name_option desc $desc_option 2>/dev/null)
				if [ $? != "0" ]; then
					echo $A
					exit 1
				else
					echo $A
					exit 0
				fi
			else
				echo "Specify filename with --name option or as argument!"
				exit 0
			fi
		fi
		for i in ${arguments[@]}
		do
			if [ $smart_flag == "1" ] || [ $use_smart_search == "1" ]; then
				echo "Creating link for file $(basename $i) located at $(dirname /$i)"
				A=$(${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/createlink $user $token location $(dirname /$i) one_time_link $otl_flag file_name $(basename $i) desc $desc_option 2>/dev/null)
				echo $A
			else
				echo "Creating link for file $i located at $dir_option"
				A=$(${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/createlink $user $token location ${dir_option} one_time_link $otl_flag file_name $i desc $desc_option 2>/dev/null)
				echo $A
			fi
		done
	fi
fi

## End of link command

## Remove command ##

if [ $command == "'remove'" ]; then
	if [ $help_flag == "1" ]; then
		remove_help
		exit 0
	fi
	if [ $removedir_flag == "1" ]; then
		if [ $dir_flag == "1" ] && [ $arguments_count != "0" ]; then
			echo "Use arguments or options to specify directory, not both at once!";
			exit 1
		fi
		if [ $dir_flag == "1" ]; then
			echo "Removing directory: $dir_option"
			${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/removedir $user $token location $dir_option 2>/dev/null
			exit $?
		fi
		for i in ${arguments[@]}
		do
			echo "Removing directory: $i"
			${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/removedir $user $token location $i 2>/dev/null
		done
		exit 0
	else
		if [ $arguments_count != "0" ] && [ $name_flag == "1" ]; then
			echo "Use arguments or options to specify file, not both at once!";
			exit 1
		fi
		if [ $arguments_count == "0" ]; then
			if [ $name_flag == "1" ]; then
				echo "Removing file $package_name_option located at $dir_option"
				${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/removefile $user $token location ${dir_option} file_name $package_name_option 2>/dev/null
				exit $? 
			else
				echo "Specify filename with --name option or as argument!"
				exit 0
			fi
		fi
		for i in ${arguments[@]}
		do
			if [ $smart_flag == "1" ] || [ $use_smart_search == "1" ]; then
				echo "Removing file $(basename $i) located at $(dirname /$i)"
				${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/removefile $user $token location $(dirname /$i) file_name $(basename $i) 2>/dev/null
			else
				echo "Removing file $i located at $dir_option"
				${stormy_cli_dir}make_api_call.py https://${stormy_server_ip}:${stormy_server_api_port}/removefile $user $token location ${dir_option} file_name $i 2>/dev/null
			fi
		done
		exit 0
	fi		
fi

## End of remove command ##
	

